// Example: The Sieve of Eratosthenes

flags, prefix_sum, primes : Array int int
n, sqrt_n, i : int

// there are exactly 1000 primes <= 7919
n = 7919
sqrt_n = int(sqrt(float(n)))

// initialize flags to [ 1..n : 0,1,1,... ]
flags = [ 1 : _ in 1..n ]
flags[1] = 0

// for i = 2,3,...,sqrt(n)
i = 2
while i <= sqrt_n do
	// if i is a prime number
	if flags[i] = 1 then
		// cross out flags[i*j] for j = i, 2*i, ... <= n/i (using j = i*k)
		foreach k do flags[i*i*k] = 0
		// cross out flags[i*j] for j = i+1, i+2, ..., n/i such that flags[j] = 1 (using j = i+k)
		foreach k in meet(1..n/i-i, { k : flags[i+k] = 1 }) do flags[i*(i+k)] = 0
	i = i + 1
out flags

// generate the primes <= n corresponding to each of the flags
prefix_sum = scan(+, flags)
primes = [ 0 : _ in 0 .. prefix_sum[n]-1 ]
foreach i : flags[i] = 1 do primes[prefix_sum[i]-1] = i

out prefix_sum, primes, size(bound(primes))
