// Signature file for parser generated by fsyacc
module Parser
type token = 
  | NEWLINE
  | INT_LIT_DOT_DOT of (string)
  | LEX_ERROR
  | STMT_END
  | BLOCK_BEGIN
  | BLOCK_END
  | EOF
  | ID of (string)
  | INT_LIT of (string)
  | FLOAT_LIT of (string)
  | PLUS
  | MINUS
  | MUL
  | DIV
  | MOD
  | L_SHIFT
  | R_SHIFT
  | LT
  | LE
  | GE
  | GT
  | EQ
  | NE
  | AND
  | OR
  | ARROW
  | V_LINE
  | L_PAREN
  | R_PAREN
  | L_BRACE
  | R_BRACE
  | L_BRACK
  | R_BRACK
  | COMMA
  | COLON
  | SEMICOLON
  | DOT_DOT
  | ID_MEMBER
  | ID_REDUCE
  | ID_SCAN
  | FORALL
  | TRUE
  | FALSE
  | EMPTY
  | ALL
  | UNDEF
  | ERROR
  | SKIP
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | FOREACH
  | IN
  | OUT
  | INT
  | FLOAT
  | BOOL
  | BOUND
  | ARRAY
type tokenId = 
    | TOKEN_NEWLINE
    | TOKEN_INT_LIT_DOT_DOT
    | TOKEN_LEX_ERROR
    | TOKEN_STMT_END
    | TOKEN_BLOCK_BEGIN
    | TOKEN_BLOCK_END
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_INT_LIT
    | TOKEN_FLOAT_LIT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_L_SHIFT
    | TOKEN_R_SHIFT
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ARROW
    | TOKEN_V_LINE
    | TOKEN_L_PAREN
    | TOKEN_R_PAREN
    | TOKEN_L_BRACE
    | TOKEN_R_BRACE
    | TOKEN_L_BRACK
    | TOKEN_R_BRACK
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_DOT_DOT
    | TOKEN_ID_MEMBER
    | TOKEN_ID_REDUCE
    | TOKEN_ID_SCAN
    | TOKEN_FORALL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_EMPTY
    | TOKEN_ALL
    | TOKEN_UNDEF
    | TOKEN_ERROR
    | TOKEN_SKIP
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_FOREACH
    | TOKEN_IN
    | TOKEN_OUT
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_BOUND
    | TOKEN_ARRAY
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_init
    | NONTERM_decl
    | NONTERM_type
    | NONTERM_elem_type
    | NONTERM_index_type
    | NONTERM_stmt_end
    | NONTERM_block_begin
    | NONTERM_block_begin'
    | NONTERM_block_renew
    | NONTERM_block_renew'
    | NONTERM_stmt
    | NONTERM_do
    | NONTERM_else_block
    | NONTERM_arr_access
    | NONTERM_expr
    | NONTERM_index_expr
    | NONTERM_index_var
    | NONTERM_pre_expr
    | NONTERM_tuple_comp
    | NONTERM_pre_expr'
    | NONTERM_COMMA_or_L1_SEMICOLON
    | NONTERM_arr_elems
    | NONTERM_arr_elems'
    | NONTERM_func_id
    | NONTERM_arg_op
    | NONTERM_L0_decl
    | NONTERM_L1_stmt
    | NONTERM_L1_stmt'
    | NONTERM_L1C_ID
    | NONTERM_L1C_ID'
    | NONTERM_L2C_INT
    | NONTERM_L0_arr_access
    | NONTERM_L0_arr_access'
    | NONTERM_L1C_expr
    | NONTERM_L1C_expr'
    | NONTERM_L0C_expr
    | NONTERM_L1C_index_expr
    | NONTERM_L1C_index_expr'
    | NONTERM_L1C_index_expr_COLON_expr
    | NONTERM_L1C_index_expr_COLON_expr'
    | NONTERM_L2C_tuple_comp
    | NONTERM_L2C_tuple_comp'
    | NONTERM_L1_SEMICOLON
    | NONTERM_L0_SEMICOLON
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.Prog) 
